https://github.com/rust-lang/cargo/commit/1e0d564ff01f

--- cargo-crates/cargo-0.56.0/src/cargo/core/features.rs.orig	1970-01-01 00:00:00 UTC
+++ cargo-crates/cargo-0.56.0/src/cargo/core/features.rs
@@ -645,7 +645,6 @@ unstable_cli_options!(
     panic_abort_tests: bool = ("Enable support to run tests with -Cpanic=abort"),
     host_config: bool = ("Enable the [host] section in the .cargo/config.toml file"),
     target_applies_to_host: bool = ("Enable the `target-applies-to-host` key in the .cargo/config.toml file"),
-    patch_in_config: bool = ("Allow `[patch]` sections in .cargo/config.toml files"),
     rustdoc_map: bool = ("Allow passing external documentation mappings to rustdoc"),
     separate_nightlies: bool = (HIDDEN),
     terminal_width: Option<Option<usize>>  = ("Provide a terminal width to rustc for error truncation"),
@@ -689,6 +688,8 @@ const STABILIZED_FEATURES: &str = "The new feature res
     See https://doc.rust-lang.org/nightly/cargo/reference/features.html#feature-resolver-version-2 \
     for more information.";
 
+const STABILIZED_PATCH_IN_CONFIG: &str = "The patch-in-config feature is now always enabled.";
+
 fn deserialize_build_std<'de, D>(deserializer: D) -> Result<Option<Vec<String>>, D::Error>
 where
     D: serde::Deserializer<'de>,
@@ -834,7 +835,6 @@ impl CliUnstable {
             "configurable-env" => self.configurable_env = parse_empty(k, v)?,
             "host-config" => self.host_config = parse_empty(k, v)?,
             "target-applies-to-host" => self.target_applies_to_host = parse_empty(k, v)?,
-            "patch-in-config" => self.patch_in_config = parse_empty(k, v)?,
             "features" => {
                 // For now this is still allowed (there are still some
                 // unstable options like "compare"). This should be removed at
@@ -869,6 +869,7 @@ impl CliUnstable {
             "config-profile" => stabilized_warn(k, "1.43", STABILIZED_CONFIG_PROFILE),
             "crate-versions" => stabilized_warn(k, "1.47", STABILIZED_CRATE_VERSIONS),
             "package-features" => stabilized_warn(k, "1.51", STABILIZED_PACKAGE_FEATURES),
+            "patch-in-config" => stabilized_warn(k, "1.56", STABILIZED_PATCH_IN_CONFIG),
             "future-incompat-report" => self.future_incompat_report = parse_empty(k, v)?,
             _ => bail!("unknown `-Z` flag specified: {}", k),
         }
--- cargo-crates/cargo-0.56.0/src/cargo/core/workspace.rs.orig	1970-01-01 00:00:00 UTC
+++ cargo-crates/cargo-0.56.0/src/cargo/core/workspace.rs
@@ -362,11 +362,6 @@ impl<'cfg> Workspace<'cfg> {
             BTreeMap<String, BTreeMap<String, TomlDependency<ConfigRelativePath>>>,
         > = self.config.get("patch")?;
 
-        if config_patch.is_some() && !self.config.cli_unstable().patch_in_config {
-            self.config.shell().warn("`[patch]` in cargo config was ignored, the -Zpatch-in-config command-line flag is required".to_owned())?;
-            return Ok(HashMap::new());
-        }
-
         let source = SourceId::for_path(self.root())?;
 
         let mut warnings = Vec::new();
