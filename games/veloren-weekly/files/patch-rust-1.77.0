Drop after lang/rust >= 1.78 update

error[E0425]: cannot find function `simd_fma` in module `std::intrinsics::simd`
    --> cargo-crates/vek-0.17.0/src/vec.rs:720:66
     |
720  |                     simd_llvm => unsafe { std::intrinsics::simd::simd_fma(self, mul, add) },
     |                                                                  ^^^^^^^^ help: a function with a similar name exists: `simd_fmax

error[E0425]: cannot find function `without_provenance_mut` in module `core::ptr`
   --> cargo-crates/shred-0.16.1/src/meta.rs:402:38
    |
402 |         let invalid_ptr = core::ptr::without_provenance_mut::<R>((self as *mut Self).addr());
    |                                      ^^^^^^^^^^^^^^^^^^^^^^ not found in `core::ptr`

--- Cargo.lock.orig	2024-05-29 15:52:55 UTC
+++ Cargo.lock
@@ -6819,12 +6819,12 @@ dependencies = [
 
 [[package]]
 name = "treeculler"
-version = "0.4.0"
+version = "0.3.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c11fcf82651ce9a4550c82beb88a38951fdde004917817eba244359720d74c06"
+checksum = "131f824862e9fe73c3b01e07c3b7f71fd14377fbfe2fa3e95fc63600bc646f51"
 dependencies = [
  "num-traits",
- "vek 0.17.0",
+ "vek 0.16.1",
 ]
 
 [[package]]
@@ -7010,9 +7010,9 @@ dependencies = [
 
 [[package]]
 name = "vek"
-version = "0.17.0"
+version = "0.16.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cb40015035f83ba23d647e647f8be060d0f6f99b7c7687989fbca3e3d65e7234"
+checksum = "c85158043f3bc1fac596d59a77e07948da340b9951b451ed4cb4a8c480aa2157"
 dependencies = [
  "approx 0.5.1",
  "num-integer",
@@ -7042,7 +7042,7 @@ dependencies = [
  "specs",
  "tokio",
  "tracing",
- "vek 0.17.0",
+ "vek 0.16.1",
  "veloren-client-i18n",
  "veloren-common",
  "veloren-common-base",
@@ -7113,7 +7113,7 @@ dependencies = [
  "tracing",
  "tracing-subscriber",
  "uuid",
- "vek 0.17.0",
+ "vek 0.16.1",
  "veloren-common-assets",
  "veloren-common-base",
  "veloren-common-i18n",
@@ -7198,7 +7198,7 @@ dependencies = [
  "specs",
  "sum_type",
  "tracing",
- "vek 0.17.0",
+ "vek 0.16.1",
  "veloren-common",
 ]
 
@@ -7222,7 +7222,7 @@ dependencies = [
  "timer-queue",
  "toml 0.8.13",
  "tracing",
- "vek 0.17.0",
+ "vek 0.16.1",
  "veloren-common",
  "veloren-common-assets",
  "veloren-common-base",
@@ -7242,7 +7242,7 @@ dependencies = [
  "rayon",
  "specs",
  "tracing",
- "vek 0.17.0",
+ "vek 0.16.1",
  "veloren-common",
  "veloren-common-base",
  "veloren-common-ecs",
@@ -7326,7 +7326,7 @@ dependencies = [
  "serde",
  "slotmap",
  "tracing",
- "vek 0.17.0",
+ "vek 0.16.1",
  "veloren-common",
  "veloren-world",
 ]
@@ -7369,7 +7369,7 @@ dependencies = [
  "strum 0.24.1",
  "tokio",
  "tracing",
- "vek 0.17.0",
+ "vek 0.16.1",
  "veloren-common",
  "veloren-common-base",
  "veloren-common-ecs",
@@ -7392,7 +7392,7 @@ dependencies = [
  "rand 0.8.5",
  "specs",
  "tracing",
- "vek 0.17.0",
+ "vek 0.16.1",
  "veloren-common",
  "veloren-common-base",
  "veloren-common-dynlib",
@@ -7489,7 +7489,7 @@ dependencies = [
  "tokio",
  "tracing",
  "treeculler",
- "vek 0.17.0",
+ "vek 0.16.1",
  "veloren-client",
  "veloren-client-i18n",
  "veloren-common",
@@ -7517,7 +7517,7 @@ version = "0.10.0"
 dependencies = [
  "bytemuck",
  "lazy_static",
- "vek 0.17.0",
+ "vek 0.16.1",
  "veloren-common",
  "veloren-common-dynlib",
 ]
@@ -7585,7 +7585,7 @@ dependencies = [
  "svg_fmt",
  "tracing",
  "tracing-subscriber",
- "vek 0.17.0",
+ "vek 0.16.1",
  "veloren-common",
  "veloren-common-base",
  "veloren-common-dynlib",
--- Cargo.toml.orig	2024-05-20 18:26:00 UTC
+++ Cargo.toml
@@ -145,7 +145,7 @@ num-traits = { version = "0.2" }
 ordered-float = { version = "3", default-features = true }
 num = { version = "0.4" }
 num-traits = { version = "0.2" }
-vek = { version = "0.17.0", features = ["serde"] }
+vek = { version = "0.16.1", features = ["serde"] }
 itertools = { version = "0.10" }
 
 serde = { version = "1.0.118", features = ["derive"] }
--- cargo-crates/shred-0.16.1/src/meta.rs.orig	2006-07-24 01:21:28 UTC
+++ cargo-crates/shred-0.16.1/src/meta.rs
@@ -399,7 +399,7 @@ impl<T: ?Sized> MetaTable<T> {
     {
         let ty_id = TypeId::of::<R>();
         // use self.addr() for unpredictable address to use for checking consistency below
-        let invalid_ptr = core::ptr::without_provenance_mut::<R>((self as *mut Self).addr());
+        let invalid_ptr = core::ptr::invalid_mut::<R>((self as *mut Self).addr());
         let trait_ptr = <T as CastFrom<R>>::cast(invalid_ptr);
         // assert that address not changed (to catch some mistakes in CastFrom impl)
         assert_eq!(
--- voxygen/Cargo.toml.orig	2024-05-20 18:26:00 UTC
+++ voxygen/Cargo.toml
@@ -134,7 +134,7 @@ tracing = { workspace = true }
 slab = { workspace = true }
 strum = { workspace = true }
 tracing = { workspace = true }
-treeculler = "0.4"
+treeculler = "0.3"
 tokio = { workspace = true, features = ["rt-multi-thread"] }
 num_cpus = "1.0"
 inline_tweak = { workspace = true }
